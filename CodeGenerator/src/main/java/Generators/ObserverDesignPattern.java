package Generators;

import Utilities.BuildingBlocks;
import Utilities.Helper;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Data
@NoArgsConstructor
public class ObserverDesignPattern extends DesignPatternGenerate {

    // interface defines structure of publisher
    private InterfaceGenerator publisherInterface;
    // interface defines structire of subscriber
    private InterfaceGenerator subscriberInterface;
    private ClassGenerator[] concretePublisher;
    private ClassGenerator[] concreteSubscriber;
    //structure of message generated by publisher
    private ClassGenerator messageClass;
    public static final Logger logger = LoggerFactory.getLogger(ObserverDesignPattern.class.getName());

    public ObserverDesignPattern(InterfaceGenerator publisherInterface, InterfaceGenerator subscriberInterface, String[] concretePubliserName,
                                 String[] concreteSubscriberName, ClassGenerator messageClass) {
        this.publisherInterface = publisherInterface;
        this.subscriberInterface = subscriberInterface;
        concretePublisher = BuildingBlocks.createConcreteClass(concretePubliserName);
        concreteSubscriber= BuildingBlocks.createConcreteClass(concreteSubscriberName);
        this.messageClass=messageClass;
        logger.debug("constructor got executed successfully");
    }


    @Override
    public void generateCode(String outputFolderPath) {
        publisherInterface.generateCode(outputFolderPath);
        subscriberInterface.generateCode(outputFolderPath);
        messageClass.generateCode(null,null,outputFolderPath);
        for(ClassGenerator cg:concretePublisher)
            cg.generateCode(null, Helper.convertInterfaceObjectToArray(publisherInterface),outputFolderPath);
        for(ClassGenerator cg:concreteSubscriber)
            cg.generateCode(null, Helper.convertInterfaceObjectToArray(subscriberInterface),outputFolderPath);
        logger.debug("code got generated successfully");
    }

    @Override
    public int generateCodeFromTemplate(String templatePath, String outputFolderPath) {
        logger.debug("generating Observer design pattern via template");
        return generateCodeFromTemplate(templatePath,outputFolderPath, ObserverDesignPattern.class);

    }
}
